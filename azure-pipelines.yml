# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self


container:
  image: sysdiglabs/secure-inline-scan:latest
  options: -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock
variables:
  containerRegistryConnection: containerRegistry
  imageName: 'alba-ferri/dummy-vuln-app'
  tags: |
    latest
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '839a5ef4-902f-4bd9-8c83-829ad3e7bb83'
  imageRepository: 'albaferridummyvulnapp'
  containerRegistry: 'msigniteacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
#  tag: '$(Build.BuildId)'
  imagePullSecret: 'msigniteacr20933a96-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        repository: $(imageName)
        command: build
        tags: latest 
    - script: inline_scan analyze -s https://secure.sysdig.com -k $(secureApiKey) $(imageName):latest
      displayName: Scan image
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: $(dockerRegistryServiceConnection)
    - task: Docker@2
      inputs:
        command: 'push'
        tags: latest 
        containerRegistry: $(dockerRegistryServiceConnection)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'albaferridummyvulnapp.demo-ms-ignite'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

